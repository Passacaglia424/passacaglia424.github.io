<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>党章学习</title>
      <link href="/2022/03/17/%E5%85%9A%E7%AB%A0%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/17/%E5%85%9A%E7%AB%A0%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>即将进行发展对象考试，但对中国共产党章程的理解还不够深刻，学校也没发具体的考试范围。因此学习并在此记录之前不太清楚或忘记的部分。</p><blockquote><p>党章网址：<a href="https://www.12371.cn/special/zggcdzc/zggcdzcqw">https://www.12371.cn/special/zggcdzc/zggcdzcqw</a><br>党章学习手册网址：<a href="https://www.12371.cn/special/dzxxsc/">https://www.12371.cn/special/dzxxsc/</a></p></blockquote><h2 id="党章学习"><a href="#党章学习" class="headerlink" title="党章学习"></a>党章学习</h2><h3 id="总纲"><a href="#总纲" class="headerlink" title="总纲"></a>总纲</h3><p><strong>党的性质</strong>：中国共产党是中国工人阶级的先锋队，同时是中国人民和中华民族的先锋队，是中国特色社会主义事业的领导核心，代表中国先进生产力的发展要求，代表中国先进文化的前进方向，代表中国最广大人民的根本利益。</p><p><strong>党的根本宗旨</strong>是全心全意为人民服务，最高理想是实现共产主义。</p><p><strong>发展</strong>是党执政兴国第一要务，<strong>创新</strong>是第一驱动力。以人民为中心的发展思想，创新，协调，绿色，开放，共享的发展理念。</p><p><strong>社会主义初级阶段基本路线</strong>：领导和团结全国各族人民，以经济建设为中心，坚持四项基本原则，坚持改革开放，自力更生，艰苦创业，为把我国建设成为富强民主文明和谐美好的社会主义现代化强国而奋斗。</p><p><strong>改革开放</strong>以来我们取得一切成绩和进步的<strong>根本原因</strong>，归结起来就是：开辟了中国特色社会主义道路，形成了中国特色社会主义理论体系，确立了中国特色社会主义制度，发展了中国特色社会主义文化。坚持四个自信：道路自信，理论自信，制度自信，文化自信。</p><p><strong>社会主义建设的根本任务</strong>:进一步解放生产力，发展生产力，逐步实现社会主义现代化，并且为此而改革生产关系和上层建筑中不适应生产力发展的方面和环节。</p><p>经济制度：公有制经济为主体，多种所有制经济共同发展的基本经济制度。按劳分配为主，多种分配方式并存的分配制。</p><p><strong>群众路线</strong>：一切为了群众，一切依靠群众，从群众中来，到群众中去，把党的正确主张变为群众的自觉行动。党除了工人阶级和最广大人民群众的利益，没有自己特殊的利益。</p><p>党风问题、党同人民群众联系问题是关系党生死存亡的问题。</p><p><strong>思想路线</strong>：一切从实际出发，理论联系实际，实事求是，在实践中检验真理和发展真理。</p><p>民主集中制，党员要有牢固树立政治意识、大局意识、核心意识、看齐意识</p><p>总体布局和战略布局：<br>“<strong>五位一体</strong>“是十八大报告的”新提法”之一。是经济建设、政治建设、文化建设、社会建设、生态文明建设。<strong>四个全面</strong>是全面建成小康社会、全面深化改革、全面依法治国、全面从严治党。</p><p>中国共产党在社会主义初级阶段的基本路线是：领导和团结全国各族人民，以经济建设为中心，坚持<strong>四项基本原则</strong>（坚持社会主义道路，坚持人民民主专政，坚持中国共产党的领导，坚持马克思列宁主义毛泽东思想），坚持改革开放，自力更生，艰苦创业，为把我国建设成为富强民主文明和谐美丽的社会主义现代化强国而奋斗。</p><p><strong>和平共处五项原则</strong>：互相尊重主权和领土完整；互不侵犯；互不干涉内政；平等互利；和平共处。</p><p><strong>强军思想</strong>：加强人民解放军的建设，坚持政治建军、改革强军、科技兴军、依法治军。全面推进党的政治建设、思想建设、组织建设、作风建设、纪律建设。坚持立党为公、执政为民，发扬党的优良传统和作风。</p><p>增强党内政治生活的政治性、时代性、原则性、战斗性。</p><p><strong>民族关系</strong>：平等、互助、团结、和谐。</p><p>弘扬以爱国主义为核心的民族精神和以改革创新为核心的时代精神。</p><p>党的建设必须坚决实现<strong>五项基本要求</strong>：<br>①坚持党的基本路线。<br>②坚持解放思想，实事求是，与时俱进，求真务实。<br>③坚持全心全意为人民服务。<br>④坚持民主集中制。<br>⑤坚持从严管党治党。(新加)</p><p>中国共产党的领导是中国特色社会主义<strong>最本质的特征</strong>，是中国特色社会主义制度的最大优势。</p><p>入新世纪， 我国进入 全面建设小康社会 、加快推进社会主义现代化 的新的发展阶段。<br>新世纪三大任务：实现社会主义现代化建设，完成祖国统一，维护世界和平和促进共同发展，</p><h3 id="第一章-党员"><a href="#第一章-党员" class="headerlink" title="第一章 党员"></a>第一章 党员</h3><p>如果要满足闭卷要求，那么强记所有内容一字不差是不现实的，因此记录关键部分，剩下部分可以联想记忆。</p><p>年满十八岁的中国工人、农民、军人、知识分子和其他社会阶层的先进分子，承认党的<strong>纲领和章程</strong>，愿意参加党的一个组织并在其中积极工作、执行党的决议和按期交纳党费的，可以申请加入中国共产党。</p><p>中国共产党党员必须全心全意为人民服务，不惜牺牲个人的一切，为实现共产主义奋斗终身。</p><h4 id="党员必须履行的义务"><a href="#党员必须履行的义务" class="headerlink" title="党员必须履行的义务"></a>党员必须履行的义务</h4><p>1.认真学习马克思列宁主义、毛——……——特色社会主义思想。学习党的……，努力提高为人民服务的本领。<br>2.贯彻执行党的基本路线和各项方针、政策，带头参加……<br>3.坚持党和人民的利益高于一切，个人利益服从党和人民的利益<br>4.自觉遵守党的纪律,……(参考入党宣誓)。<br>5.维护党的团结和统一，对党忠诚老实，言行一致，坚决反对一切……<br>6.切实开展批评和自我批评，勇于揭露……<br>7.密切联系群众<br>8.发扬社会主义新风尚，带头实践社会主义核心价值观……在一切困难和危险的时刻挺身而出，英勇斗争，不怕牺牲。</p><h4 id="党员享有权利"><a href="#党员享有权利" class="headerlink" title="党员享有权利"></a>党员享有权利</h4><p>（一）参加党的有关会议，阅读党的有关文件，接受党的教育和培训。<br>（二）在党的会议上和党报党刊上，参加关于党的政策问题的讨论。<br>（三）对党的工作提出建议和倡议。<br>（四）在党的会议上有根据地批评党的任何组织和任何党员，向党负责地揭发、检举党的任何组织和任何党员违法乱纪的事实，要求处分违法乱纪的党员，要求罢免或撤换不称职的干部。<br>（五）行使表决权、选举权，有被选举权。<br>（六）在党组织讨论决定对党员的党纪处分或作出鉴定时，本人有权参加和进行申辩，其他党员可以为他作证和辩护。<br>（七）对党的决议和政策如有不同意见，在坚决执行的前提下，可以声明保留，并且可以把自己的意见向党的上级组织直至中央提出。<br>（八）向党的上级组织直至中央提出请求、申诉和控告，并要求有关组织给以负责的答复。</p><h4 id="党员吸收标准"><a href="#党员吸收标准" class="headerlink" title="党员吸收标准"></a>党员吸收标准</h4><p>发展党员条件：坚持<strong>个别吸收</strong>的原则。申请入党的人，要填写入党志愿书，要有两名正式党员作介绍人，要经过支部大会通过和上级党组织批准，并且经过预备期的考察，才能成为正式党员。在特殊情况下，党的中央和省、自治区、直辖市委员会可以直接接收党员。</p><p>预备党员<strong>☆入党誓词</strong>：我志愿加入中国共产党，拥护党的纲领，遵守党的章程，履行党员义务，执行党的决定，严守党的纪律，保守党的秘密，对党忠诚，积极工作，为共产主义奋斗终身，随时准备为党和人民牺牲一切，永不叛党。</p><p>预备党员的权利除了没有<strong>表决权、选举权和被选举权</strong>以外，同正式党员一样。义务也同正式党员一样。预备党员的预备期，从支部大会通过他为预备党员之日算起。党员的党龄，从预备期满转为正式党员之日算起。预备期一年。预备党员就有党籍。</p><p>退党都需经过支部大会讨论后除名，并报上级党组织批准或备案。没有正当理由，连续六个月不参加党的组织生活，或不交纳党费，或不做党所分配的工作，就被认为是自行脱党。</p><h3 id="第二章-党的组织制度"><a href="#第二章-党的组织制度" class="headerlink" title="第二章　党的组织制度"></a>第二章　党的组织制度</h3><p><strong>民主集中制基本原则</strong>：<br>（一）党员个人服从党的组织，<strong>少数服从多数</strong>，下级组织服从上级组织，全党各个组织和全体党员服从党的全国代表大会和中央委员会。<br>（二）党的各级领导机关，除它们派出的代表机关和在非党组织中的党组外，都由选举产生。<br>（三）党的<strong>最高领导机关</strong>，是党的全国代表大会和它所产生的中央委员会。党的地方各级领导机关，是党的地方各级代表大会和它们所产生的委员会。党的各级委员会向<strong>同级的代表大会负责并报告工作</strong>。<br>（四）党的上级组织要经常听取下级组织和党员群众的意见；党的下级组织既要向上级组织请示和报告工作。<br>（五）党的各级委员会实行<strong>集体领导和个人分工负责相结合</strong>的制度。<br>（六）党禁止任何形式的个人崇拜。<br>民主集中制是民主基础上集中和集中指导下的民主相结合，是党的<strong>根本组织原则</strong>。</p><p><strong>四个服从</strong>：党员个人服从党的组织，少数服从多数，下级组织服从上级组织，全党各个组织和全体党员服从党的全国代表大会和中央委员会。</p><p>选举采用无记名投票的方式，党的各级代表大会代表实行任期制。</p><p>成立&#x2F;撤销党组织，必须由上级党组织决定。</p><p>有关全国性的重大政策问题，只有党中央有权作出决定，各部门、各地方的党组织可以向中央提出建议，但不得擅自作出决定和对外发表主张。代表组织言论超过一定限度由党组织讨论决定，或向上级党组织请示。</p><p>不允许任何领导人实行个人专断和把个人凌驾于组织之上。</p><p>党的中央和省、自治区、直辖市委员会实行<strong>巡视</strong>制度</p><h3 id="第三章-党的中央组织"><a href="#第三章-党的中央组织" class="headerlink" title="第三章　党的中央组织"></a>第三章　党的中央组织</h3><p>党的最高领导机关：党的全国代表大会和它所产生的中央委员会。</p><p>党的<strong>全国代表大会</strong>五年举办一次，由中央委员会召集。<strong>职权</strong>：<br>（一）听取和审查中央委员会的报告；<br>（二）审查中央纪律检查委员会的报告；<br>（三）讨论并决定党的重大问题；<br>（四）修改党的章程；<br>（五）选举中央委员会；<br>（六）选举中央纪律检查委员会。</p><p><strong>党的全国代表会议</strong>的职权是：讨论和决定重大问题；调整和增选中央委员会、中央纪律检查委员会的部分成员。调整和增选中央委员及候补中央委员的数额，不得超过党的全国代表大会选出的中央委员及候补中央委员各自总数的五分之一。</p><p>中央委员会全体会议由中央政治局召集，每年至少举行一次。中央政治局向中央委员会全体会议报告工作，接受监督。</p><p>中央委员会全体会议-选举-&gt;党的中央政治局&#x2F;中央政治局常务委员会&#x2F;中央委员会总书记<br>中央政治局常务委员会委员-产生-&gt;中央委员会总书记<br>中央委员会全体会议-选举-&gt;中央政治局常务委员会<br>中央政治局-提名-&gt;中央委员会-通过-&gt;中央书记处成员<br>党的全国代表大会-选举-&gt;中央委员会<br>中央委员会-决定-&gt;中央军事委员会</p><p>这里画了一张图：<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220318163856.png" alt="中央机构关系图"></p><p>代表大会闭会期间，由委员会行使职权；委员会闭会期间由常务委员会行使职权。会议经上一级组织批准可以延期或提前。</p><h3 id="第四章-党的地方组织"><a href="#第四章-党的地方组织" class="headerlink" title="第四章　党的地方组织"></a>第四章　党的地方组织</h3><blockquote><p>注：未注明多长时间召开一次的会议或多长时间的连任，参照全国级别的。</p></blockquote><p>地方：省、自治区、直辖市、设区的市|自治州、县（旗）、自治县、不设区的市和市辖区。前&#x2F;后者委员会的委员和候补委员必须有三&#x2F;五年以上的党龄。</p><p>党的地方各级委员会全体会议，每年至少召开两次。</p><p>党的地方各级代表大会的职权是：<br>（一）听取和审查同级委员会的报告；<br>（二）审查同级纪律检查委员会的报告；<br>（三）讨论本地区范围内的重大问题并作出决议；<br>（四）选举同级党的委员会，选举同级党的纪律检查委员会。</p><h3 id="第五章-党的基层组织"><a href="#第五章-党的基层组织" class="headerlink" title="第五章　党的基层组织"></a>第五章　党的基层组织</h3><p>党的基层委员会、总支部委员会、支部委员会每届任期三年至五年。</p><p>党的基层组织是党在社会基层组织中的战斗堡垒，是党的全部工作和战斗力的基础。党的<strong>基层组织的基本任务</strong>：<br>（一）宣传和执行党的路线、方针、政策，宣传和执行党中央、上级组织和本组织的决议。<br>（二）组织党员认真学习马克思…-…社会主义思想，推进“两学一做”学习教育常态化制度化。<br>（三）对党员进行教育、管理、监督和服务，提高党员素质，坚定理想信念，增强党性，严格党的组织生活，开展批评和自我批评。<br>（四）密切联系群众。<br>（五）充分发挥党员和群众的积极性创造性，发现、培养和推荐他们中间的优秀人才。<br>（六）对要求入党的积极分子进行教育和培养，做好经常性的发展党员工作，重视在生产、工作第一线和青年中发展党员。<br>（七）监督党员干部和其他任何工作人员严格遵守国家法律法规，严格遵守国家的财政经济法规和人事制度，不得侵占国家、集体和群众的利益。<br>（八）教育党员和群众自觉抵制不良倾向，坚决同各种违纪违法行为作斗争。</p><p>各级党和国家机关中党的基层组织，协助行政负责人完成任务，改进工作，对包括行政负责人在内的每个党员进行教育、管理、监督，不领导本单位的业务工作。</p><p>党员学习党的基本知识，学习科学、文化、法律和业务知识。</p><p><strong>党支部</strong>是党的基础组织，担负直接教育党员、管理党员、监督党员和组织群众、宣传群众、凝聚群众、服务群众的职责。</p><h3 id="第六章-党的干部"><a href="#第六章-党的干部" class="headerlink" title="第六章　党的干部"></a>第六章　党的干部</h3><p>干部选拔原则：德才兼备、以德为先的原则。实现干部队伍的革命化、年轻化、知识化、专业化。</p><p>党的各级领导干部具备条件：<br>（一）具有履行职责所需要的马克思列宁…-…主义思想，努力用马克思主义的立场、观点、方法分析和解决实际问题.<br>（二）具有共产主义远大理想和中国特色社会主义坚定信念，坚决执行党的基本路线和各项方针、政策。<br>（三）坚持解放思想，实事求是，与时俱进，开拓创新，认真调查研究，能够把党的方针、政策同本地区、本部门的实际相结合。<br>（四）有强烈的革命事业心和政治责任感，有实践经验，有胜任领导工作的组织能力、文化水平和专业知识。<br>（五）正确行使人民赋予的权力，坚持原则，依法办事，清正廉洁，勤政为民，以身作则，艰苦朴素，密切联系群众，坚持党的群众路线，自觉地接受党和群众的批评和监督，反对任何滥用职权、谋求私利的行为。<br>（六）坚持和维护党的民主集中制。</p><h3 id="第七章-党的纪律"><a href="#第七章-党的纪律" class="headerlink" title="第七章　党的纪律"></a>第七章　党的纪律</h3><p>党的纪律是维护党的团结统一、完成党的任务的保证。党的纪律主要包括政治纪律、组织纪律、廉洁纪律、群众纪律、工作纪律、生活纪律。</p><p>党员的<strong>纪律处分</strong>：警告、严重警告、撤销党内职务、留党察看、开除党籍(党内最高处分)。</p><p>留党察看最长不超过两年。党员在留党察看期间没有表决权、选举权和被选举权。党员经过留党察看，确已改正错误的，应当恢复其党员的权利；坚持错误不改的，应当开除党籍。严重违纪、严重触犯刑律的党员必须开除党籍。</p><p><strong>纪律处分程序</strong>：经过支部大会讨论决定，报党的基层委员会批准；情况复杂或是开除党籍的处分，应分别不同情况，报县级或县级以上党的纪律检查委员会审查批准。</p><blockquote><p>党的中央委员会委员等处理程序比较复杂，在此不记录。</p></blockquote><p>对于严重违犯党的纪律、本身又不能纠正的党组织，上一级党的委员会在查明核实后，应根据情节严重的程度，作出进行改组或予以解散的决定，并报再上一级党的委员会审查批准，正式宣布执行。</p><h3 id="第八章-党的纪律检查机关"><a href="#第八章-党的纪律检查机关" class="headerlink" title="第八章　党的纪律检查机关"></a>第八章　党的纪律检查机关</h3><p>党的中央纪律检查委员会:(简称)中纪委</p><p>领导体制：中纪委在党的中央委员会领导下进行工作。地方纪委在同级委员会和上级纪委领导下工作。</p><p>纪委由同级代表大会产生，任期和委员会相同。中纪委选举常务委员会和书记&#x2F;副书记。下级组织同理。</p><p>党的中央和地方纪律检查委员会向同级党和国家机关全面派驻党的纪律检查组。纪律检查组组长参加驻在部门党的领导组织的有关会议。他们的工作必须受到该机关党的领导组织的支持。</p><p>纪律检查机关<strong>主要任务</strong>：维护党的章程和其他党内法规，检查党的路线、方针、政策和决议的执行情况，协助党的委员会推进全面从严治党、加强党风建设和组织协调反腐败工作。</p><p>纪委<strong>职责</strong>：监督、执纪、问责。对党的组织和党员领导干部履行职责、行使权力进行监督，受理处置党员群众检举举报，开展谈话提醒、约谈函询；检查和处理党的组织和党员违反党的章程和其他党内法规的比较重要或复杂的案件，决定或取消对这些案件中的党员的处分；进行问责或提出责任追究的建议；受理党员的控告和申诉；保障党员的权利。</p><p>对党员的纪律处分，必须经过支部大会讨论决定，报党的基层委员会批准；　严重触犯刑律的中央委员会委员、候补委员，由中央政治局决定开除其党籍；严重触犯刑律的地方各级委员会委员、候补委员，由同级委员会常务委员会决定开除其党籍。</p><h3 id="第九章-党-组"><a href="#第九章-党-组" class="headerlink" title="第九章　党　组"></a>第九章　党　组</h3><p>在中央和地方国家机关、人民团体、经济组织、文化组织和其他非党组织的领导机关中，可以成立党组。党组发挥核心领导作用。</p><p>党组的任务，主要是负责贯彻执行党的路线、方针、政策；加强对本单位党的建设的领导，履行全面从严治党责任；讨论和决定本单位的重大问题；做好干部管理工作；讨论和决定基层党组织设置调整和发展党员、处分党员等重要事项；团结党外干部和群众，完成党和国家交给的任务；领导机关和直属单位党组织的工作。</p><h3 id="第十章-党和共产主义青年团的关系"><a href="#第十章-党和共产主义青年团的关系" class="headerlink" title="第十章　党和共产主义青年团的关系"></a>第十章　党和共产主义青年团的关系</h3><p>中国共产主义青年团是中国共产党领导的先进青年的群团组织，是党的助手和后备军。共青团受同级党的委员会领导，同时受共青团上级组织领导。</p><h3 id="第十一章-党徽党旗"><a href="#第十一章-党徽党旗" class="headerlink" title="第十一章 党徽党旗"></a>第十一章 党徽党旗</h3><p><strong>中国共产党党徽</strong>：<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220317121749.png" alt="党徽图"><br><strong>党旗</strong>：<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220317121929.png" alt="党旗图"><br>中国共产党的党徽党旗是中国共产党的象征和标志。党的各级组织和每一个党员都要维护党徽党旗的尊严。要按照规定制作和使用党徽党旗。</p><h2 id="其它知识"><a href="#其它知识" class="headerlink" title="其它知识"></a>其它知识</h2><h4 id="党性修养"><a href="#党性修养" class="headerlink" title="党性修养"></a>党性修养</h4><p>共产党员具有崇高的理想追求，鉴定的政治信念，先进的思想觉悟，严格的组织观念，高尚的道德情操是一个党员的本质的改造，是要求党员立身行事必须按照党性原则来约束自己，改造自己。</p><h4 id="社会主义核心价值体系"><a href="#社会主义核心价值体系" class="headerlink" title="社会主义核心价值体系"></a>社会主义核心价值体系</h4><p>马克思主义指导思想,中国特色社会主义共同理想,以爱国主义为核心的民族精神和以改革创新为核心的时代精神，社会主义荣辱观。<br><strong>现实目标</strong>：团结动员全党全国各族人民为建设富强、民主、文明、和谐的社会主义现代化国家而奋斗。</p><h4 id="基本政治制度"><a href="#基本政治制度" class="headerlink" title="基本政治制度"></a>基本政治制度</h4><p>根本：人民代表大会制度。<br>基本：中国共产党领导的多党合作和政治协商制度，民族区域自治制度，基层群众自治制度。</p><h4 id="依法治国的总目标"><a href="#依法治国的总目标" class="headerlink" title="依法治国的总目标"></a>依法治国的总目标</h4><p>建设中国特色社会主义法治体系，建设社会主义法治国家，巩固人民民主专政，建设社会主义政治文明。</p><h4 id="四个民主"><a href="#四个民主" class="headerlink" title="四个民主"></a>四个民主</h4><p>民主选举，民主监督，民主管理，民主决策</p><h4 id="文化建设总目标"><a href="#文化建设总目标" class="headerlink" title="文化建设总目标"></a>文化建设总目标</h4><p>建设社会主义精神文明，实行依法治国和以德治国相结合，提高全民族的思想道德素质和科学文化素质，为改革开发和社会主义现代化建设提供强大的思想保证，精神动力和智力支持，建设社会主义文化强国。</p><h4 id="社会建设的总要求、原则和重点"><a href="#社会建设的总要求、原则和重点" class="headerlink" title="社会建设的总要求、原则和重点"></a>社会建设的总要求、原则和重点</h4><p>总要求：民主法治，公平正义，诚信友爱，充满活力，安定有序，人与自然和谐相处。<br>原则：共同建设，共同享有。<br>重点：保障和改善民生。</p><h4 id="总体国家安全观"><a href="#总体国家安全观" class="headerlink" title="总体国家安全观"></a>总体国家安全观</h4><p>加强社会治安综合治理，依法坚决打击各种危害国家安全和利益、危害社会稳定和经济发展的犯罪活动和犯罪分子，保持社会长期稳定。</p><h4 id="生态文明建设的理念，意识和基本国策"><a href="#生态文明建设的理念，意识和基本国策" class="headerlink" title="生态文明建设的理念，意识和基本国策"></a>生态文明建设的理念，意识和基本国策</h4><p>树立尊重自然，顺应自然，保护自然生态文明理念。<br>增强绿山清水就是金山银山意识。<br>坚持节约资源和保护环境的基本国策。</p><h4 id="外交政策和开放战略"><a href="#外交政策和开放战略" class="headerlink" title="外交政策和开放战略"></a>外交政策和开放战略</h4><p>独立自主的和平外交政策，坚持和平发展道路，坚持互利共赢的开放战略。</p><h4 id="四大考验四大危险"><a href="#四大考验四大危险" class="headerlink" title="四大考验四大危险"></a>四大考验四大危险</h4><p>执政考验，改革开发考验，市场经济考验，外部环境考验。<br>脱离群众，能力不足，精神懈怠，消极腐败。</p><h3 id="作者系列"><a href="#作者系列" class="headerlink" title="作者系列"></a>作者系列</h3><p>《论共产党的修养》 刘少奇<br>“哲学家们只使用不同的方式解释世界，重点是改变世界。” 马克思</p><h3 id="各届大会安排"><a href="#各届大会安排" class="headerlink" title="各届大会安排"></a>各届大会安排</h3><p>十一届三中全会(1978年12月18日-22日)以来创立邓小平理论。<br>十三届四中全会(1989年6月23～24日)以来创立三个代表重要思想。<br>十七届四中全会通过了《中共中央关于加强和改进新形势下党的建设若干重大问题的决定》。 </p><p>四大第一次明确提出了无产阶级在民主革命中的领导权和工农联盟问题。<br>十五大将邓小平理论确立为党的指导思想。<br>党的第十六次全国代表大会(2002年11月8日至14日)以来创立科学发展观。回答了新形势下实现什么样的发展、怎样发展等重大问题。以人为本，全面协调，统筹兼顾。<br>党的第十八次全国代表大会（2002年11月8日至14日开始）以来创立习近平新时代中国特色社会主义思想。回答了新时代坚持和发展什么样的中国特色社会主义、怎样坚持和发展中国特色社会主义这个重大时代课题。做出了全面依法治国设计。<br>党的十九大写入了两个一百年奋斗目标，党政军民学党领导一切，习近平思想。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 党员 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim映射修改&amp;vscode remote配置</title>
      <link href="/2022/03/04/vim%E6%98%A0%E5%B0%84%E4%BF%AE%E6%94%B9&amp;vscoderemote%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/03/04/vim%E6%98%A0%E5%B0%84%E4%BF%AE%E6%94%B9&amp;vscoderemote%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="vim按键映射修改"><a href="#vim按键映射修改" class="headerlink" title="vim按键映射修改"></a>vim按键映射修改</h3><blockquote><p>这篇文章写的时候还比较喜欢vim，现在觉得在windows下使用vscode remote更香一点，想一想还是挂上来。</p></blockquote><p>​    在Linux内核的系统下，IDE的选择和Windows有所不同。虽然有很多强大的IDE同样支持Linux版本，但是考虑到服务器等没有图形化界面的应用情景，vim这一基于命令行，如瑞士军刀般好用的工具还是会配上用场(Emacs也比较好用，不过笔者更喜欢vim)。</p><p>​    但是vim相较于现代IDE而言还是过于古老，对于一个没有更改过的vim还是比较低效的。这里记录一些常用的按键映射，自定义快捷键，在输入部分内容时可以自动补全，或是创建文件时添加头部信息。这样不仅让vim使用更方便一些，更换系统时也不用重新配置一遍，直接替换配置文件即可。配置文件放置于用户根目录下。</p><p>​   部分设置参考网上大佬的博客，覆盖面算是很全面了。<br>    命令模式下输入set可以查看所有可设置的选项</p><p>在用户家目录（~）下创建名为.vimrc的文件，将以下内容复制到文件中。文件转移的话，vim中命令模式下ggVG+y全选复制，V为进入可视模式。</p><pre><code class="sh">&quot;/*************************************************************************&quot;    &gt; File Name: .vimrc&quot;    &gt; Author:passacaglia &quot;    &gt; Mail: 1143703334@qq.com &quot;    &gt; Created Time: 2021年09月20日 星期一 15时15分34秒&quot; ************************************************************************/syntax onset background=darkset confirm&quot;set cursorline &quot; 突出显示当前行set laststatus=2 &quot; 显示状态栏set ruler                   &quot; 打开状态栏标尺set autoindentset nowrapscan              &quot; 禁止在搜索到文件两端时重新搜索set incsearch               &quot; 输入搜索内容时就显示搜索结果set hlsearch                &quot; 搜索时高亮显示被找到的文本set noerrorbells            &quot; 关闭错误信息响铃set cmdheight=1             &quot; 设定命令行的行数为 1set foldmethod=syntax       &quot; 设置语法折叠set foldcolumn=0            &quot; 设置折叠区域的宽度setlocal foldlevel=1        &quot; 设置折叠层数为&quot; set foldclose=all           &quot; 设置为自动关闭折叠                            nnoremap &lt;space&gt; @=((foldclosed(line(&#39;.&#39;)) &lt; 0) ? &#39;zc&#39; : &#39;zo&#39;)&lt;CR&gt;                            &quot; 用空格键来开关折叠&quot;styleset tabstop=4       &quot;tabkey widthset nuset softtabstop=4set shiftwidth=4&quot;selectable,multiple language environmentif has(&quot;multi_byte&quot;)set encoding=utf-8set termencoding=utf-8set formatoptions+=mMset fencs=utf-8,gbkendif&quot; 选中状态下 Ctrl+c 复制vmap &lt;C-c&gt; &quot;+y&quot;此部分是插入模式下的映射:inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O:inoremap ( ()&lt;ESC&gt;i&quot;:inoremap ) &lt;c-r&gt;=ClosePair(&#39;)&#39;)&lt;CR&gt;&quot;:inoremap &#125; &lt;c-r&gt;=ClosePair(&#39;&#125;&#39;)&lt;CR&gt;:inoremap [ []&lt;ESC&gt;i&quot;:inoremap ] &lt;c-r&gt;=ClosePair(&#39;]&#39;)&lt;CR&gt;:inoremap &quot; &quot;&quot;&lt;ESC&gt;i:inoremap &#39; &#39;&#39;&lt;ESC&gt;i&quot;允许插件  filetype plugin on&quot;共享剪贴板  set clipboard=unnamed&quot;functionautocmd BufNewFile *.cpp,*.[ch],*.sh,*.py exec &quot;:call SetTitle()&quot;func SetTitle()if &amp;filetype == &#39;sh&#39;    call setline(1,&quot;\#########################################################################&quot;)    call append(line(&quot;.&quot;), &quot;\# File Name: &quot;.expand(&quot;%&quot;))    call append(line(&quot;.&quot;)+1, &quot;\# Author: passacaglia&quot;)    call append(line(&quot;.&quot;)+2, &quot;\# mail: 1143703334@qq.com&quot;)    call append(line(&quot;.&quot;)+3, &quot;\# Created Time: &quot;.strftime(&quot;%c&quot;))    call append(line(&quot;.&quot;)+4, &quot;\#########################################################################&quot;)    call append(line(&quot;.&quot;)+5, &quot;\#!/bin/bash&quot;)    call append(line(&quot;.&quot;)+6, &quot;&quot;)elseif &amp;filetype == &#39;c&#39; || &amp;filetype == &#39;cpp&#39; || &amp;filetype == &#39;h&#39;    call setline(1, &quot;/*************************************************************************&quot;)    call append(line(&quot;.&quot;), &quot;    &gt; File Name: &quot;.expand(&quot;%&quot;))    call append(line(&quot;.&quot;)+1, &quot;    &gt; Author: passacaglia&quot;)    call append(line(&quot;.&quot;)+2, &quot;    &gt; Mail: 1143703334@qq.com &quot;)    call append(line(&quot;.&quot;)+3, &quot;    &gt; Created Time: &quot;.strftime(&quot;%c&quot;))    call append(line(&quot;.&quot;)+4, &quot; ************************************************************************/&quot;)    call append(line(&quot;.&quot;)+5, &quot;&quot;)elseif &amp;filetype == &#39;py&#39;    call setline(1,&quot;#########################################################################&quot;)    call append(line(&quot;.&quot;), &quot;# File Name: &quot;.expand(&quot;%&quot;))    call append(line(&quot;.&quot;)+1, &quot;# Author: passacaglia&quot;)    call append(line(&quot;.&quot;)+2, &quot;# mail: passacaglia@88.com&quot;)    call append(line(&quot;.&quot;)+3, &quot;# Created Time: &quot;.strftime(&quot;%c&quot;))    call append(line(&quot;.&quot;)+4, &quot;#########################################################################&quot;)    call append(line(&quot;.&quot;)+5, &quot;&quot;)endifif &amp;filetype == &#39;cpp&#39;    call append(line(&quot;.&quot;)+6, &quot;#include&lt;iostream&gt;&quot;)    call append(line(&quot;.&quot;)+7, &quot;using namespace std;&quot;)    call append(line(&quot;.&quot;)+8, &quot;&quot;)endifif &amp;filetype == &#39;c&#39;    call append(line(&quot;.&quot;)+6, &quot;#include&lt;stdio.h&gt;&quot;)    call append(line(&quot;.&quot;)+7, &quot;&quot;)endif    &quot;新建文件后，自动定位到文件末尾autocmd BufNewFile * normal Gendfunc</code></pre><p>其中,这个表示回车符：</p><pre><code>&lt;CR&gt;</code></pre><p>在上方SetTitle函数的Author和Mail字符串中将作者名和邮箱改成自己的即可。<br>​    实际上暂时只支持C&#x2F;C++、shell和python的内容，毕竟java等跨平台又主要用来写大工程的语言也没有在无图形化的linux下硬写的必要，主要适用于小文件场景。</p><h3 id="vscode-remote配置"><a href="#vscode-remote配置" class="headerlink" title="vscode remote配置"></a>vscode remote配置</h3><p>在Windows&#x2F;Mac系统下可以通过vscode的插件远程连接Linux服务器，从而在图形化界面下编写代码。vscode才是永远的神好吧,没有实不现的功能，只有找不到的插件→_→<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220305115520.png" alt="20220305115520"></p><p>打开vscode,下载这个插件:<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220307193140.png" alt="20220307193140"></p><p>原理就是基于SSH连接。ctrl+shift+p打开设置输入Remote-SSH找到这个插件,先选择其中的“Connect to Host…”选项，再选择”Configure SSH Hosts…”选项，最后选择config文件，我这里是这样：<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220307193812.png" alt="20220307193812"><br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220307194034.png" alt="20220307194034"><br>在这里按格式设置Host名(可任意)、HostName(远程主机ip)、User(登录的用户名)。填好后在左边的远程资源管理器中就会出现相应的主机了，可直接连接：<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220307194133.png" alt="20220307194133"><br>选择一个窗口作为连接后的界面，连接后，选择一个目录，会建立工作区，在这个界面打开终端会是远程主机的终端。SSH连接默认使用22号端口，请保证远程主机的端口打开。此外，在此窗口打开终端，是远程主机的终端。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vscode </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust学习笔记（基础篇）</title>
      <link href="/2022/03/02/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/03/02/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<center>Rust真是一个学习友好型语言，官方教程很全面！</center><p align="right">————序</p><blockquote><p>注：由于学习时使用的是Windows 10系统，所以以下内容仅保证适用于windows系统，Linux系统下可能有微小差别。语法有点像简化版C++，有自己很多独特机制。Rust虽然官方教程友好，但是不适合作为入门语言。<br>学习参考视频：<a href="https://www.bilibili.com/video/BV1hp4y1k7SV?p=36">https://www.bilibili.com/video/BV1hp4y1k7SV?p=36</a></p></blockquote><p>文件命名规范：文件名若有单词，中间加下划线，如hello_world.rs。<br>常量命名规范：全大写字母。<br>函数名名规范：小写字母，单词间下划线分开。Rust函数可定义在main函数后。</p><p>Rust的main函数没有参数，没有返回。fn main{}。</p><p>Rust marco(宏)，会在宏名称后面加’!’。Rust的缩进是四个空格，而不是tab键。</p><p>Rust是“ahead of time”(预先编译)的语言，编译成功直接生成二进制文件，在windows下还会额外生成一个.pdb的调试文件。</p><h3 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h3><p>cargo有官方中文文档:<a href="https://cargo.budshome.com/index.html">https://cargo.budshome.com/index.html</a><br>使用包管理器cargo创建(安装Rust时自带，无需额外安装)。<br>命令: cargo new &lt;项目名&gt; 在当前路径下生成项目。</p><p>项目内可能存在的文件含义：<br>Cargo.toml 项目配置文件<br>.gitignore 用于git<br>Cargo.lock 关于依赖项的信息。</p><h4 id="可在项目下使用的其他命令"><a href="#可在项目下使用的其他命令" class="headerlink" title="可在项目下使用的其他命令"></a>可在项目下使用的其他命令</h4><p>cargo build 构建项目<br>cargo run 编译运行代码<br>cargo check 只检查代码能通过编译，但不生成可执行文件。<br>cargo update 按照Cargo.lock更新依赖</p><p>引用库use</p><p>按层级划分：</p><h4 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h4><p>包。有Cargo的特性，测试、共享、构建crate。<br>包含一个Cargo.toml,描述如何构建crate。只能包含0-1个library crate，但可以包含任意个binary crate。binary crate放在src&#x2F;bin目录下。<br>Cargo.toml可添加引用外部包。std属于外部包但不用添加引用，但是使用时还需要use。</p><h4 id="Crate"><a href="#Crate" class="headerlink" title="Crate"></a>Crate</h4><p>单元包。一个模块树，可产生一个library或可执行文件。<br>分为binary crate和library crate。<br><strong>src&#x2F;main.rs</strong>:binary crate的crate root。Rust编译器从这里开始组成crate的根module。<br><strong>src&#x2F;lib.rs</strong>:library crate的crate root。</p><h4 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h4><p>模块，定义在文件中。使用mod关键词创建，可嵌套。<br>模块可以定义<strong>私有边界</strong>，Rust中所有变量，结构体、模块、函数等都默认是私有的。父模块无法访问子模块条目，但子模块可以访问祖先的。<br>如果模块名后跟”;”而非代码块，那么指在此文件名中定义了模块。如在文件A.rs中定义了mod B;那么实际在src&#x2F;A&#x2F;B.rs。(此A为目录名)</p><h4 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h4><p>为了在模块中找到某个条目而使用。<br>-绝对路径：从crate root开始，使用crate名或字面值crate。<br>-相对路径：当前模块开始，使用self、super或当前模块标识符。</p><h4 id="use的使用"><a href="#use的使用" class="headerlink" title="use的使用"></a>use的使用</h4><p>pub use<br><strong>嵌套路径</strong>：一次引用多个来自相同的部分:</p><pre><code class="rust">use std::io::&#123;self,write&#125;</code></pre><p>self表示自身，另外也可使用通配符*。</p><h2 id="1-通用的编程概念"><a href="#1-通用的编程概念" class="headerlink" title="1.通用的编程概念"></a>1.通用的编程概念</h2><h5 id="隐藏-shadowing"><a href="#隐藏-shadowing" class="headerlink" title="隐藏(shadowing)"></a>隐藏(shadowing)</h5><p>使用let可以给之前的同名变量声明新的变量，新的变量会隐藏之前的同名变量。<br>如:</p><pre><code class="rust">let x=5;let x=x+1;</code></pre><h3 id="1-1数据类型"><a href="#1-1数据类型" class="headerlink" title="1.1数据类型"></a>1.1数据类型</h3><h4 id="1-1-1标量数据类型"><a href="#1-1-1标量数据类型" class="headerlink" title="1.1.1标量数据类型"></a>1.1.1标量数据类型</h4><p>u32:32位的无符号整型。范围-(2^n-1)~2^n-1。<br>i32:32位的有符号整型。范围0-2^n-1，为默认类型。<br>u&#x2F;i8、u&#x2F;i16,u&#x2F;i64,u&#x2F;i128同理，数字为位数大小。<br>isize&#x2F;usize:由计算机架构决定大小，如64位系统就是64。<br>f32:32位浮点数类型。<br>f64:64位浮点数类型，为默认类型。<br>bool:值为true&#x2F;false。<br>char:4字节，使用unicode标量值。范围U+0000-U+D7FF,U+E000-U+10FFFF</p><h4 id="1-1-2复合数据类型"><a href="#1-1-2复合数据类型" class="headerlink" title="1.1.2复合数据类型"></a>1.1.2复合数据类型</h4><p>Tuple:元组，圆括号声明，具有固定长度。类似python。</p><pre><code class="rust"> let tup: (i32, f64, u8) = (500, 6.4, 1);//声明一个三元素元组。</code></pre><p>数组：分配在堆栈上。类似js。rust不允许访问超出索引的内存。</p><pre><code class="rust">let a = [1, 2, 3, 4, 5];let a:[i32;5] = [1, 2, 3, 4, 5];let a = [3;5];//分配了5个元素，都是3。</code></pre><p>结构体</p><pre><code class="rust">struct Rectangle&#123;    width:u32;    height:u32;&#125;let rect= Rectangle&#123;    width:32,    height:40,&#125;;//赋值</code></pre><p>enum枚举，值只能是其中之一。<br>结构体、枚举类型中可定义方法。访问成员 枚举名::成员名</p><pre><code class="rust">impl Rectangle&#123;    fn area(&amp;self)-&gt;u32&#123;        self.width=self.length;    &#125;&#125;</code></pre><p>rust中没有-&gt;运算符，会自动引用和解引用。</p><h4 id="1-1-3集合数据类型"><a href="#1-1-3集合数据类型" class="headerlink" title="1.1.3集合数据类型"></a>1.1.3集合数据类型</h4><p>标准库定义的数据类型，储存在堆上。</p><h5 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h5><p>写法Vec<T>。创建方式有：</T></p><pre><code class="rust">let v:Vec&lt;i32&gt;=Vec::new();let vec![1,2,3];/*与枚举的结合，实现储存不同数据*/enum Cell&#123;    Int(i32);    Float(f64);    Text(String);&#125;let v=vec![Cell::Int(3),Text(String::from(&quot;hello))];</code></pre><p>操作：</p><pre><code class="rust">v.push(4);//添加元素。v.get(2);//获得引用。或者使用下标索引也是引用。</code></pre><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><p>这是来自标准库的类型，除此之外还有&amp;str、OsString、CString、CStr等类似的字符串类型。Rust不允许对String进行索引，但允许按照字形簇的索引边界进行切割。</p><pre><code class="rust">let mut s=String::from(&quot;foo&quot;);s.push_str(&quot;bar&quot;);//添加字符串到之后，该方法不会获得所有权。s.push(&#39;s&#39;);//添加单个字符let s=format!(&quot;&#123;&#125;-&#123;&#125;&quot;,s,x);//用宏拼接s和x字符串，不会获得所有权。for (k,v) in &amp;s&#123;//遍历    println!(&quot;&#123;&#125;&#123;&#125;&quot;,k,v);&#125;//split_whitespace方法：按空格分割字符串</code></pre><p>+号也可以连接字符串，不能两个字符串直接相加，需要其中一个是引用形式，会将其转化为字符串切片。不引用的会失效。<br>字符串切片：<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220306170931.png" alt="20220306170931"><br>被切片引用的字符串禁止修改值。<br>字形簇：真正接近人类语言的表示，一个个真正的字符。</p><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><p>哈希表，用键值对的方式储存HashMap&lt;K,V&gt;。不是预导入类型。K,V分别必须是同一类型。<br>预导入：不需要额外use，直接就可使用。</p><pre><code class="rust">let mut hp=HashMap::new();hp.insert(3，5);//编译器可以推断出K,V的类型了。/*通过元素类型为元组的vector加collect()方法来生成HashMap。*/let v=vec![1,2];let w=vec![3,4];let s:HashMap&lt;_,_&gt;=v.iter().zip(w.iter()).collect();s.entry(30).or_insert(88);//如果没有K=30的值，插入30,88，否则不插入/*or_insert()返回值:K存在返回对应V的可变引用；不存在就插进去再返回这个可变引用。*/</code></pre><h3 id="1-2控制流"><a href="#1-2控制流" class="headerlink" title="1.2控制流"></a>1.2控制流</h3><h4 id="1-2-1控制语句"><a href="#1-2-1控制语句" class="headerlink" title="1.2.1控制语句"></a>1.2.1控制语句</h4><p>判断if&#x2F;else if&#x2F;else,判断表达式不加括号。<br>可用于作为变量条件声明，但是要求返回类型相等。</p><pre><code class="rust">let number = if true &#123;5&#125; else &#123;6&#125;;</code></pre><p>无限循环loop，break退出。条件循环while，判断表达式也不加括号。<br>范围循环for … in … 类似python。设置(1..4)可表示1-3的范围，.rev()反向。<br>模式匹配match,举例(绑定值的模式匹配):</p><pre><code class="rust">match Coin&#123;    Coin:dollar=&gt;1,    Coin:yuan=&gt;4,    Coin:Quarter=&gt;(state)&#123;        println!&#123;&quot;Hello &#123;:?&#125;&quot;,state&#125;;        25    &#125;&#125;</code></pre><p><em>通配符为其余情况,()表示什么都没发生。rust强制要求处理所有情况，可用</em>&#x3D;&gt;()</p><h4 id="1-2-2错误处理"><a href="#1-2-2错误处理" class="headerlink" title="1.2.2错误处理"></a>1.2.2错误处理</h4><h5 id="不可恢复错误"><a href="#不可恢复错误" class="headerlink" title="不可恢复错误"></a>不可恢复错误</h5><p>执行panic!宏，默认展开清理调用栈，或选择不清理直接退出程序:在cargo.toml中设置panic&#x3D;’abort’。<br>cargo build&#x2F;run中不带–release参数会带有调试信息。</p><h5 id="可恢复的错误"><a href="#可恢复的错误" class="headerlink" title="可恢复的错误"></a>可恢复的错误</h5><p>Result枚举类来处理错误，这类错误类似java里的异常。可通过结合match表达式处理错误，也可以用闭包。</p><pre><code class="rust">enum Result&lt;T, E&gt; &#123;    Ok(T),//操作成功Ok变体返回T类型    Err(E),//操作失败Ok变体返回E类型&#125;</code></pre><p>.unwrap()方法：match的快捷方法，如果Ok返回值，如果Err调用panic!。<br>.expect()方法可以自定义错误信息。</p><h5 id="传播错误"><a href="#传播错误" class="headerlink" title="传播错误"></a>传播错误</h5><p>比如函数返回值为Result&lt;String,io:Error&gt;，将错误抛回调用者。<br>?运算符：在返回值为Result的函数后面加?，也能起到返回错误的作用。实际上隐式调用了from函数。</p><h3 id="1-3占位符"><a href="#1-3占位符" class="headerlink" title="1.3占位符"></a>1.3占位符</h3><p>{}<br>{:?}<br>{:#?}</p><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p>泛型实际上是含有占位符的模板，参考C++。编译时将占位符换成具体的类型参数。<br>如:</p><pre><code class="Rust">fn largest&lt;T&gt;(list:&amp;T)-&gt;T&#123;...&#125; //函数中的泛型</code></pre><h2 id="2-Rust核心机制"><a href="#2-Rust核心机制" class="headerlink" title="2.Rust核心机制"></a>2.Rust核心机制</h2><p>Rust的核心机制。储存在stack上的数据必须有固定的大小，也就是copy trait的，编译时大小未知或运行时大小变化的数据存在heap上。<br>元组内的都是copy trait的，那么它本身也是。</p><h3 id="2-1所有权机制☆"><a href="#2-1所有权机制☆" class="headerlink" title="2.1所有权机制☆"></a>2.1所有权机制☆</h3><h4 id="2-1-1引用"><a href="#2-1-1引用" class="headerlink" title="2.1.1引用"></a>2.1.1引用</h4><p><strong>引用</strong>：允许你使用某些值而不取得其所有权，因为<strong>Rust中变量一旦离开其所有权，就会失效</strong>。用&amp;表示。除此之外，直接赋值或调用.move()，会导致所有权转移，使用.clone(),相当于生成一个新的同样值的对象。.get()可以获得引用。默认不允许修改引用的值。<br><strong>可变引用</strong>：&amp;mnt [变量] 方式,函数中可变引用作参数，实参也需要可变。<br><strong>引用的作用域</strong>：从声明到最后一次使用。<br>Rust中，编译器可以保证引用永远不会是悬空引用，即不会指向的内容已提前被释放。<br>任意时刻只能满足之一：①一个可变引用 ②任意个不可变引用。也就是说，一个变量在其作用域内不能同时有可变和不可变的引用。<br><strong>pub关键字</strong>：公有的。对enum设置pub,里面都是pub的。而struct是pub，里面不一定是pub,mod也是。<br>切片slice不会改变所有权。</p><h4 id="2-1-2函数中所有权变化"><a href="#2-1-2函数中所有权变化" class="headerlink" title="2.1.2函数中所有权变化"></a>2.1.2函数中所有权变化</h4><p>如果是基本数据类型，进入函数时不失去所有权；堆中的变量进入函数会失去所有权，因此若需要保留，则应该引用传参。<br>被当作函数返回值的变量所有权将会被移动出函数并返回到调用函数的地方，而不会直接被无效释放。</p><p>借用</p><h3 id="2-2生命周期"><a href="#2-2生命周期" class="headerlink" title="2.2生命周期"></a>2.2生命周期</h3><p>引用保持有效的作用域。</p><h3 id="2-3Trait"><a href="#2-3Trait" class="headerlink" title="2.3Trait"></a>2.3Trait</h3><p>把方法签名放在一起。来定义实现某种目的所必须的一种行为。类似于接口。<br>只能在本地crate实现trait。如果想在其他crate中实现trait，需要use引入并设置成公有。但是必须在本地作用域，父类型中不可见。</p><pre><code class="Rust">pub trait Summary &#123;    fn summarize(&amp;self) -&gt; String &#123;//实现默认方法        String::from(&quot;(Read more...)&quot;)    &#125;    fn read(&amp;self)-&gt;String;//不实现默认方法&#125;impl Summary for NewsArticle &#123;//为NewArticle实现方法。    fn summarize(&amp;self) -&gt; String &#123;        format!(&quot;&#123;&#125;, by &#123;&#125; (&#123;&#125;)&quot;, self.headline, self.author, self.location)    &#125;&#125;/*Trait作为参数*/pub fn notify(item: impl Summary) &#123;    println!(&quot;Breaking news! &#123;&#125;&quot;, item.summarize());&#125;/*Trait Bound形式语法糖*/pub fn notify&lt;T: Summary&gt;(item: T) &#123;    println!(&quot;Breaking news! &#123;&#125;&quot;, item.summarize());&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>先手必胜？策梅洛定理的探讨</title>
      <link href="/2022/02/14/%E7%AD%96%E6%A2%85%E6%B4%9B%E5%AE%9A%E7%90%86%E7%9A%84%E6%8E%A2%E7%A9%B6/"/>
      <url>/2022/02/14/%E7%AD%96%E6%A2%85%E6%B4%9B%E5%AE%9A%E7%90%86%E7%9A%84%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h3>1.关于定理</h3>笔者作为一个棋类，尤其是象棋的爱好者，特别喜欢钻研下棋的一些套路。然而，随着计算机算力的提高，AI技术的发展，人类逐渐开始下不过人工智能。尚在2006年，象棋特级大师许银川还能勉强战胜当时比较强大的电脑浪潮天梭，之后战胜电脑就逐渐成了绝唱，发展到现在，即使运行在普通PC机上的《象棋名手》软件，也不是象棋世界冠军可以抗衡的。2017年，柯洁0:3负于阿尔法狗，也标志者围棋，这一棋类智力之冠的胜利也归人工智能所有。那么，我们可以很自然地想到，会不会有一天,不需要开下，只要棋一摆好，双方就能知道哪一方胜利呢?<p>这在理论上是可行的。<strong>策梅略定理</strong>（Zermelo’s theorem）是博弈论的一条定理,以恩斯特●策梅洛命名。定理表示在二人的有限游戏中，如果双方皆拥有完全的资讯，并且运气因素并不牵涉在游戏中，那先行或后行者当中必有一方有必胜&#x2F;必不败的策略（注意，也包括平局)。策梅洛定理的论文于1913年以德文发表。</p><p>策梅洛定理仅在双人游戏中有效，在三人及以上的多人游戏中胜负仍是不确定的。定理的具体表现形式，满足<strong>条件</strong>：</p><ol><li>双方依次行动</li><li>有限步，不会出现可以一直重复某种循环的状态</li><li>信息完备，双方均知道先前的步骤且没有隐藏的机制</li><li>仅有赢、输、平局三种结局</li></ol><p>在满足以上四种条件的情况下，只会出现以下<strong>情况</strong>之一</p><ol><li>先走方有必胜的走法</li><li>两者的最优策略会导向平局</li><li>后走方有必胜的走法</li></ol><p>满足情况3：“后走方有必胜的走法”，需要规则内不能有停止行动的选项，否则先手方的最优策略是停一回合，成为实际上的后手方，那么此时后手方的最优解也是停一回合。如果能无限停止，将不满足条件2，如果不能无限停止，将导向情况2。</p><p>对于<strong>策梅洛定理的证明</strong>，可以采用数学归纳法证明。假设结束所需的回合数n。n&#x3D;1,即一步就能游戏结束，那么一定会导致先手必胜&#x2F;负&#x2F;和的局面。现在对于任何一个n&gt;1的值，行动后将转换为一个n-1时的情况，而这时的结果是已知的。因为对于此时先手方行动的情况，必然是以下三种互斥的情况之一：</p><ol><li>存在行动方案使得之后的状态为先手方有必胜策略，那么此时先手有必胜策略；</li><li>所有的行动方案都使得之后的状态为后手方有必胜策略，那么此时后手方有必胜策略；</li><li>不存在行动方案使得之后的状态为先手方有必胜策略，且存在行动方案使得之后的状态为双方有不败的策略，那么此时有双方不败的策略。</li></ol><p>编程上，如果有类似状况，一般使用记忆化搜索的方式应用。      </p><h3>2.已得到验证的游戏</h3><h4>经典井字棋</h4>经典的3x3井字棋就是一个典型的双方不败游戏。为了增加点代入感，我们先手用○，后手用×来表示吧。○的第一步行动为走正中，此时×必须走角落，否则○将必胜：因为○第二步走对位的角落，那么×在堵的过程中会出现堵不上的情况：<p><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220214233346.png" alt="井字棋图"></p><p>由于井字棋上下左右对称，×走四个位置都会触发以上情况。<br>另一种情况，如果第二步×走角落，那么无论○下一步怎么走，×都可以阻止其连成三个，直至下满，双方和棋。</p><h4>无禁手规则的五子棋</h4><blockquote><p>禁手：五子棋术语，指对局中禁止先行一方(黑方)使用的战术，具体包括黑方一子落下时同时形成双活三、双四或长连等三种棋形。禁手只对黑方有效，白方无禁手。黑方禁手的位置称为禁手点。</p></blockquote><p>五子棋在很早的时候，就已经有前人研究出了无禁手规则下先手必胜的情况。对于白棋的应对不同，开局可以分为蒲月、寒星、新月等，但是所有的开局，无论白棋如何防备，只要黑方不下错，都不能阻止黑棋胜利。因此，五子棋赛场上都对先手方有很大的限制。日常下棋达不到那么高的水平，但是一般也能感觉到黑棋优势较大。<br>五子棋执黑必胜的变招相当多，读者感兴趣可以自行了解，这里只列举其中的蒲月开局：<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220215000533.png" alt="20220215000533"><br>黑棋正中开局，白棋下在斜线，黑棋再下在3的位置，对此，白棋可以有很多种应对方法：<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220215001207.png" alt="20220215001207"><br>其中最后一幅图为白棋最强防守，但是黑方可以选择：<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220215001454.png" alt="20220215001454"><br>后招可以参考<a href="https://wenku.so.com/d/df91d9b58a3c207002ada61806fee442%E3%80%82">https://wenku.so.com/d/df91d9b58a3c207002ada61806fee442。</a></p><h4>双人取物游戏</h4>地上摆放了80个物品，每人每次可以取1至4个，双方轮流取物，取到最后一个者胜利，那么某一方是否有必胜策略？<p>后手方必胜。先手方取X个时，后手方取5-X个，这样每个回合两人加起来都为五个，而5是80的公约数。这类游戏可以拓展到<strong>一般形式</strong>：地上摆放了X个物品，每人每次可以取Y至Z个，取到最后一个者胜利。那么如果X是Y+Z的公倍数，后手方必胜，每次先手方取s个时，后手方取Y+Z-s个。如果X不是Y+Z的公倍数，先手方必胜，先手方先取X除以Y+Z的余数个，转换为前一情况的后手方，执行前一情况的必胜策略。如果做过编程类题目，应该对此不陌生。</p><h4>WU游戏</h4>确切地说，这个并没有被证实，只是我对此比较感兴趣，想找出有没有一方必胜的方式（按照策梅洛定理，应该是有的）。灵感来自于侯世达著的《哥德尔、艾舍尔、巴赫——集异壁之大成》一书中的WU谜题。<p>设置游戏规则如下：<br>初始给定”WUWU”字符串，两人参与，双方轮流设计一条规则。<br>规则设置方式：<br>1.假定α,β分别为一至三个任意字母。<br>2.条件项选其一：如果字符串中有α&#x2F;以α开头&#x2F;以α结尾。<br>执行项选其一：可以将其删除并在原位置添加β&#x2F;在串尾添加β&#x2F;在串首添加β。<br>每设定一条规则，将会按顺序执行所有的规则直至字符串不再发生改变，转移到下一个人设定。如果设定规则与之前某规则冲突，则删除之前的规则。不能设置无限递归规则。<br>胜利条件：清空字符串者立即获得胜利，连续两回合将字符串变成同样的全相同字母者获得胜利。</p><h3>3.定理的思考</h3><h4>策梅略定理对积分制是否有效?</h4>由于定理的前提条件是结局仅有胜、负、和三种可能，那么把积分设定为：分高者胜，双方同分则平局。那么，定理仍然是有效的。如果规则机制中会允许执行某些步骤会导致暂时导向分数降低，但是一定步骤后会收束为分数比常规增加更高的情况，按数学归纳法，这类情况可以成为一个集合，从而将其看做一个步骤，这个步骤集由于更优会取代其它的步骤集合。许多游戏也可以视为积分制，比如象棋设置胜利为10000分，开局双方0分，每下一步都为局势评分，就像现在的象棋打分软件，一些弃子攻杀的步骤也会先打低分再打高分。<h4>策梅洛定理对二人以上博弈为什么无效？</h4>假设三人A、B、C游戏，游戏设定为一方胜利另两方败，或者三人平局。如果按A、B、C的顺序依次执行，如果A有必胜策略，那么把B、C的行动组合，将其看做一个两次行动的对手，从而变成两人形式，似乎可行？但是如果A只有必和策略，那么情况就不太确定了，作为理性人B、C采取的对自己的最优策略，但是由于只有一个胜利者，这个策略合起来不一定是最优的，可能不会导致趋向于平局。其实我也不太确定，以上只是一点推论，不一定正确。<h4>证明结论成立到找出结果需要多少努力？</h4>对于一些简单游戏来说不难，但是对目前的“大棋”很难，按对局的变化数来说，围棋的棋盘就有2^361种可能(再减去气中有子的情况)，再加上每一步的可能性，目前的算力要花费数十亿年计算。穷举既然不可行，那么只能寄托于数学家、科学家们、围棋大师们能不能找到合适的算法了。<p>对这个定理来说，虽然我们或许目前不能找到一方必胜或必和的方式是怎样的，但是我们能证明它存在也是有意义的，或许日后会有应用前景。就像密码学中的零知识证明，A方在不透露任何知识的情况下让B方相信A掌握了这个知识，也有其应用场景，如数字签名。</p><p>策梅洛定理属于博弈论的其中一个环节，笔者虽然没有系统学过博弈论的课程，但是对博弈论有一定的兴趣和研究。如果读者也对这些感兴趣的话，维基百科上有较为详尽的博弈论内容：</p><p><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220214233837.png" alt="维基百科图"></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定理 </tag>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的常用指令</title>
      <link href="/2022/02/13/Git%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/02/13/Git%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>最近想系统学一下Git，而不仅仅是简单的拉取和推送。然而我查阅Git的官方文档的时候，因为懒得看英文，网页设置为谷歌自动翻译，但是”git”在英文中是混账、饭桶的意思，所以出现了啼笑生非的一幕：<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220216142916.png" alt="20220216142916"><br>因此，为了使用方便（头不笑掉），这里把git常用的一些命令记录下来。建议使用最新版本。</p><blockquote><p>官方文档参见<a href="https://git-scm.com/docs">Git Reference</a>，内容完整，不过可读性一般。</p></blockquote><h3 id="常见词汇"><a href="#常见词汇" class="headerlink" title="常见词汇"></a>常见词汇</h3><p><strong>repo</strong>:repository的简称，指代本地或远程仓库。<br><strong>工作树</strong>:一般指实际操作的目录，目录结构是树型的。<br><strong>索引(index)</strong>:也叫暂存区，逻辑结构上位于工作树和版本库之间。工作树状态提交到索引，再由索引数据添加到版本库。一般来说，当前在目录上进行改动视为在暂存区更改，只有commit后才会成为新的版本。<br><strong>分支(branch)</strong>:进行版本控制时可以有多个不同分支，互不影响，可以有多种修改。主分支为”master”。<br><strong>HEAD</strong>:指向现在使用的分支的最后一次更新，在&#x2F;git&#x2F;HEAD。<br><strong>版本</strong>：每次提交作为一个版本，每个版本都会有自己的版本信息。可视为分支上的结点。<br><strong>commit</strong>:提交，一次提交生成一个版本。<br><strong>.git</strong>:版本库目录。<br><strong>.gitignore</strong>:可以理解为”git ignore”，告诉git哪些文件不需要进行版本控制。</p><h3 id="定义的环境变量"><a href="#定义的环境变量" class="headerlink" title="定义的环境变量"></a>定义的环境变量</h3><p><strong>HOME</strong>:git的全局配置位置。<br><strong>GIT_ALTERNATE_OBJECT_DIRECTORIES</strong>：告诉 Git 到哪里去找不在 GIT_OBJECT_DIRECTORY 目录中的对象。 如果你有很多项目有相同内容的大文件，这个可以用来避免存储过多备份。<br><strong>GIT_DIR</strong>：生成.git的工作目录，如果没有设置， Git 会按照目录树逐层向上查找 .git 目录，直到到达 ~ 或 &#x2F;。<br><strong>GIT_EDITOR</strong>：用户需要编辑文本时git使用的编辑器。<br><strong>GIT_EXEC_PATH</strong>:git寻找根据此路径找子程序，git –exec-path查看。<br><strong>GIT_HTTP_LOW_SPEED_LIMIT</strong>：若git网络操作在网速低于GIT_HTTP_LOW_SPEED_LIMIT字节&#x2F;秒，并且持续 GIT_HTTP_LOW_SPEED_TIME 秒以上的时间，Git 会终止这个操作。<br><strong>GIT_ICASE_PATHSPECS</strong>:让所有的路径规范忽略大小写。<br><strong>GIT_INDEX_FILE</strong>：索引文件的路径。<br><strong>GIT_NOGLOB_PATHSPECS</strong>：若设置为1，通配符将仅作为字符匹配，如*.c只匹配名为*.c的文件。<br><strong>GIT_OBJECT_DIRECTORY</strong>：对象储存目录，.git&#x2F;objects 目录的位置。<br><strong>GIT_TEMPLATE_DIR</strong>:临时目录。<br><strong>GIT_TRACE_SETUP</strong>：显示 Git 发现的关于版本库和交互环境的信息<br><strong>PREFIX</strong>：系统级别的配置。</p><h4 id="关于提交"><a href="#关于提交" class="headerlink" title="关于提交"></a>关于提交</h4><p><strong>GIT_AUTHOR_NAME</strong> ：“author” 字段的可读名字。<br><strong>GIT_AUTHOR_EMAIL</strong>： “author” 字段的邮件。<br><strong>GIT_AUTHOR_DATE</strong> ： “author” 字段的时间戳。<br><strong>GIT_COMMITTER_NAME</strong> ： “committer” 字段的可读名字。<br><strong>GIT_COMMITTER_EMAIL</strong> ： “committer” 字段的邮件。<br><strong>GIT_COMMITTER_DATE</strong> ： “committer” 字段的时间戳。<br><strong>EMAIL</strong>：如果 user.email 没有配置， 就会用到此指定的邮件地址。</p><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><h4 id="关于参数"><a href="#关于参数" class="headerlink" title="关于参数"></a>关于参数</h4><p>在本文中，指令下方附带常用参数,本文用@p表示参数填入位置，参数可多选。参数前横杠规律：<br>单字母参数前一个横杠，如-a;<br>单词参数前两个横杠，如–option;<br>多单词参数最前面两横杠，单词间一横杠，如–on-contains。</p><h4 id="分享与更新类指令"><a href="#分享与更新类指令" class="headerlink" title="分享与更新类指令"></a>分享与更新类指令</h4><p><strong>git init @p</strong><br>初始化命令。在当前目录(如果指定了GIT_DIR将使用此目录)创建一个空的 Git 存储库或重新初始化现有的存储库，产生.git目录作为版本库。<br>-b &lt;分支名称&gt; - 为新创建的存储库中的初始分支使用指定的名称</p><p><strong>git clone [仓库url] @p [目录]</strong><br>将存储库内容克隆到本地目录，可以是远程主机的储存库。Git 支持 ssh、git、http 和 https 协议。</p><pre><code class="shell">git clone https://github.com/git/git/archive/v2.17.0.tar.gz</code></pre><p><strong>git add @p [文件或目录路径]</strong><br>将文件内容添加到暂存区中，会递归添加指定目录下所有文件，或是可以并排添加多个。添加”Documentation&#x2F;“支持正则匹配，如</p><pre><code class="shell">$ git add Documentation/\*.txt</code></pre><p>匹配目录及子目录下所有txt文件。不含’&#39;将不会搜索子目录。直接用*就是当前目录下所有文件。<br>-A 添加指定目录下所有文件，若未指定则当前目录。<br>-p 交互式地列出并询问前后版本差异，确认是否更改。（很细致）<br>-u</p><p><strong>git commit @p</strong><br>创建一个提交，记录对储存库的更改。这是对储存库的更新。<br>-m 参数后接字符串作为提交的信息(为什么做这次更改)。<br>-a会将没有使用git add的文件也提交到库。</p><p><strong>git config @p [配置项] [值]</strong><br>配置git使用的信息,如git config –global user.name “passacaglia”配置用户名。<br>–global 全局配置，而非仅当下储存库。</p><p><strong>git push @p &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</strong><br>推送指令；提交本地仓库以更新远程仓库。<br>-u 绑定选项<br>-f 强制提交，会覆盖之前所有内容<br>比如我要上传到github，也可使用git remote add origin <a href="mailto:&#103;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d;">&#103;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>:&lt;用户名&gt;&#x2F;&lt;仓库名&gt;关联仓库。</p><p>一般一个完整的流程是git init创建仓库,git add添加内容到暂存区,git commit提交到本地库，git push推送到远程仓库。</p><p><strong>git pull @p &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</strong><br>拉取指令。获取远程仓库的内容合并到本地。</p><blockquote><p>注：如果分支名相同，只需要写一个，省略冒号。</p></blockquote><h4 id="查看信息类指令"><a href="#查看信息类指令" class="headerlink" title="查看信息类指令"></a>查看信息类指令</h4><p><strong>git diff @p</strong><br>命令比较文件的不同，即比较文件在暂存区和工作区的差异。<br>–cached 查看已缓存的改动。<br>–stat 只显示摘要<br>HEAD 查看所有的改动</p><p><strong>git status @p</strong><br>查询仓库的当前状态。<br>-s 输出标记会有两列。</p><p><strong>git log @p</strong><br>查看历史记录，无参数时查看过去的提交信息和版本号。<br>–online 仅显示简洁版本。<br>–reverse 倒序显示日志。<br>–graph 拓扑图选项，可以看到何时出现分支和合并。<br>–author 只查看指定作者的日志。</p><h4 id="分支操作类指令"><a href="#分支操作类指令" class="headerlink" title="分支操作类指令"></a>分支操作类指令</h4><p><strong>git branch @p &lt;分支名&gt;</strong><br>列出、创造或删除分支。<br>–list：列出目前已有的分支，当前所处分支绿色高亮表示。<br>-d:删除指定的分支</p><p><strong>git checkout @p &lt;分支名&gt;</strong><br>切换分支或恢复工作树文件。</p><pre><code class="shell">git checkout master //切换到master分支</code></pre><p>-b &lt;分支名&gt; 创建一个本地分支并切换 </p><p><strong>git merge &lt;分支名&gt;</strong><br>从分支的分歧开始，将两个或多个开发历史合并在一起。将指定分支合并到HEAD指定的分支。</p><blockquote><p>快进合并(Fast-Forward)：通常的合并方式如图：<br><img src="https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/https://upload-1300382050.cos.ap-guangzhou.myqcloud.com/20220223225152.png" alt="20220223225152"><br>快进合并后原有的两条分支在逻辑上合成一条，就像快进了一样。比如topic合并到master后，只剩下D-E-F-G-H-A-B-C，但是HEAD位置仍在原位置。</p></blockquote><p><strong>git rebase</strong><br>快速合并分支，当从分支B融合到A上时，直接删除分支B，将分支B与A分歧的部分直接添加在A后面。</p><h4 id="补丁修改类指令"><a href="#补丁修改类指令" class="headerlink" title="补丁修改类指令"></a>补丁修改类指令</h4><p><strong>git revert &lt;版本号&gt;</strong><br>通过提交一个新的版本，在这个版本中撤消过去某个版本A所做的变化，来达到删除A的影响的目的。</p><blockquote><p><strong>注</strong>：&lt;版本号&gt;内容为HEAD时，指当前版本；HEAD^为上次,HEAD^^为上上次，以此类推。也可以用HEAD~n表示当前版本以前n个版本。</p></blockquote><p><strong>git reset @p &lt;版本号&gt;</strong><br>从当前位置A回退到之前的某个版本B。<br>–hard 回退到指定版本号，期间的版本全部丢弃。<br>–soft 回退到之前的指定版本。</p><blockquote><p><strong>注</strong>:由于回退后本地版本库可能会比远程库旧，下一次git push时需添加-f选项强制执行。</p></blockquote><p>常用的大概就这些，日后需要再添加。版本管理是一件值得做的事，一旦版本多了再管理就会很混乱。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 实用工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
